GIT学习
linux下的安装git：验证是否安装：git
(Debuntu linxu)安装git：sudo apt-get install git或者sudo apt-get install git-core
安装完成后进行设置：git config --global user.name "your name"
                    git config --global user.email "email@example.com"
创建一个版本库，选择盘符
cd E:  mkdir learngit
cd learngit

使用 git init 把这个目录交给git可以管理的仓库
git add <filename> 添加(可以添加多个文件)
git commit -m "添加的注解"
git status 查看修改的状态
git diff  查看具体修改的内容

git log 查看历史记录
git log --pretty=oneline 可以查看历史版本号
git reset --hard HEAD^ 返回上一个版本 多个^返回上上……版本 太多是可以使用HEAD~X

git reset --hard 版本号

git reflog  用来记录你的每一次命令

暂存区stage，分支 master（指向master的HEAD）
工作区add到stage ，commit 到master

git 只负责把暂存区的文件提交到master（分支）

撤销修改 ：git checkout --git.txt
git checkout -- file命令中的--很重要，没有--，
就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。

git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”

创建sshkey
$ ssh-keygen -t rsa -C "youremail@example.com"

https://github.com/Gsmsu/studygit.git  Gsmsu
$ git remote add origin git@github.com:Gsmsu/learngit.git



#################################################################
//第二部分学习分支
准备新的feature1分支，继续我们的新分支开发：

$ git checkout -b feature1
Switched to a new branch 'feature1'

分支学习起来还是有点难以理解


切换到master分支
git checkout master

Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：

$ git merge feature1

用带参数的git log也可以看到分支的合并情况：

$ git log --graph --pretty=oneline --abbrev-commit

删除feature1分支：

$ git branch -d feature1



######################################
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

下面我们实战一下--no-ff方式的git merge：

首先，仍然创建并切换dev分支：